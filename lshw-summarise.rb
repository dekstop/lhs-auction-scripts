#!/usr/bin/env ruby
#
# Parses XML files generated by lshw and builds an eBay-compliant HTML summary.
#
# TODO: add more info
# * height in U
# * number of CPU sockets
# * number of HDD slots
# * redundant power supply?
# * management interfaces?
# * virtualisation?
#
# TODO: ensure sequence order: vendor, model, description, other stuff, capabilities
# TODO: better display of hyperthreaded CPUs, e.g. 00:30:48:5e:0b:51

require 'rubygems'
require 'hpricot'

# ========
# = conf =
# ========

@prefs = {
	:nil_strings => [ # Meaningless strings, strip when found
		'To Be Filled By O.E.M.',
		'To be filled by O.E.M.',
		'^empty$',
		'Desktop Computer',
		'^Motherboard$',
		'^CPU$',
		'^Ethernet interface$',
		'^BIOS$',
		'1234567890',
		'0123456789',
		'^IDE Channel .$',
		'^\s+$', # Dangerous... will remove values that start with a newline.
		'^Internal$',
		'^00$',
		'^SerNum[0-9]$',
		'^PartNum[0-9]$',
		'^Manufacturer[0-9]$',
	]
}

# ========
# = helpers =
# ========

def fail(str)
	puts str
	exit 1
end

def title_case(str)
	str.to_s.gsub(/\b\w/){$&.upcase}
end

def hertz(str)
	return nil if str.nil?
	num = str.to_i / 1000.0 / 1000.0
	unit = ' MHz'
	if (num > 1000) then
		num = num / 1000.0
		unit = ' GHz'
	end
	sprintf('%.2f', num) + unit
end

def bytes(str)
	return nil if str.nil?
	num = str.to_i
	unit = ' bytes'
	if (num > 1024) then
		num = num / 1024.0
		unit = ' KB'
	end
	if (num > 1024) then
		num = num / 1024.0
		unit = ' MB'
	end
	if (num > 1024) then
		num = num / 1024.0
		unit = ' GB'
	end
	sprintf('%.1f', num) + unit
end

def matches_nil_string(str)
	@prefs[:nil_strings].each do |ns|
		return true if str.nil? or str.match(ns) or str.size==0
	end
	false
end

def strip(str)
	return nil if matches_nil_string(str)
	return str
end

def each_node(node, path, &block)
	idx = 1
	node.search(path).each do |node|
		yield node, idx
		idx += 1
	end
end

def text(node, path='/')
	strip(node.search(path).inner_html)
end

def make_name(key)
	title_case(key.to_s.gsub(/_/, ' '))#.gsub(/ /, '&nbsp;')
end

def make_list(infomap)
	m = infomap.keys.map do |k|
		infomap[k].nil? ? k : "#{k}: #{infomap[k]}"
	end
	m.join(', ')
end

def get_capabilities(node, path='/capabilities')
	cap = node.search(path)
	nodes = cap.search('//capability')
	Hash[*nodes.collect do |n|
		[n[:id], strip(n.inner_html)]
	end.flatten]
end

def get_node_attrs(node, path='')
	{
		:model => text(node, "#{path}/product"),
		:vendor => text(node, "#{path}/vendor"),
		:description => text(node, "#{path}/description"),
		:version => text(node, "#{path}/version"),
		:serial => text(node, "#{path}/serial"),
		:clock => hertz(text(node, "#{path}/clock[@units='Hz']"))
	}
end

def get_ram_attrs(node, path='/')
	{
		:size => bytes(text(node, "#{path}/size[@units='bytes']"))
	}
end

def get_cpu_attrs(node, path='')
	{
		:model => text(node, "#{path}/product"),
		:speed => hertz(text(node, "#{path}/size[@units='Hz']")),
		:clock => hertz(text(node, "#{path}/clock[@units='Hz']")),
		:bits => text(node, "#{path}/width[@units='bits]")
	}
end

def get_cache_attrs(node, path='/')
	{
		:description => text(node, "#{path}/description"),
		:size => bytes(text(node, "#{path}/size[@units='bytes']"))
	}
end

def get_network_attrs(node, path='')
	{
		:model => text(node, "#{path}/product"),
		:vendor => text(node, "#{path}/vendor"),
		:description => text(node, "#{path}/description"),
		:version => text(node, "#{path}/version"),
		:MAC_address => text(node, "#{path}/serial")
	}
end

def print_title(str)
	puts '<tr>'
	puts "	<td colspan=\"2\">#{str}</td>"
	puts '</tr>'
end

def print_infomap(infomap)
	if (infomap.values.compact.empty?) then
		# print_title('<p>n/a</p>')
	else
		infomap.each_pair do |k,v|
			if v then
				puts '<tr>'
				puts "	<td valign=\"top\"><p>#{make_name(k)}:</p></td>"
				puts "	<td><p>#{v}</p></td>"
				puts '</tr>'
			end
		end
	end
end

def print_capabilities(node, path='/')
	print_infomap({
		:features => make_list(get_capabilities(node, path))
	})
end

# ========
# = main =
# ========

if ARGV.size != 1 then
	fail("<path to lshw.xml>")
end

fn = ARGV[0]

doc = Hpricot(File.read(fn))

puts '<table cellpadding="0" cellspacing="30" border="0" class="lhsAuction">'
puts '<tr>'
puts '	<td width="50%" valign="top">'

# Left column
	puts '<table cellpadding="0" cellspacing="0" border="0" class="lhsAuction">'

	# print_title('<h2>Server</h2>')
	# print_infomap(get_node_attrs(doc, '/node'))
	# print_infomap({
	# 	:height => 'TODO',
	# 	:CPU_sockets => 'TODO',
	# 	:HDD_slots => 'TODO',
	# 	:redundant_power_supply => 'TODO',
	# })
	# 
	print_title('<h2>Motherboard</h2>')
	print_infomap(get_node_attrs(doc, '//node[@id="core"]'))

	print_title('<h3>BIOS</h3>')
	print_infomap(get_node_attrs(doc, '//node[@id="firmware"]'))
	print_capabilities(doc, '//node[@id="firmware"]')

	print_title('<h2>Memory</h2>')
	print_infomap(get_node_attrs(doc, '//node[@id="memory"]'))
	each_node(doc, '//node[@id="memory"]/node[@class=memory]') do |node, idx|
		print_title("<h3>Slot #{idx}</h3>")
		print_infomap(get_node_attrs(node))
		print_infomap(get_ram_attrs(node))
	end

	each_node(doc, '//node[@class="processor"]') do |node, idx|
		print_title("<h2>CPU #{idx}</h2>")
		print_infomap(get_cpu_attrs(node))
		print_capabilities(node)

		each_node(node, '/node[@class=memory]') do |cache, idx|
			print_title("<h3>Cache #{idx}</h3>")
			print_infomap(get_cache_attrs(cache))
			print_capabilities(cache)
		end
	end

	puts '</table>'
puts '</td>'

# Right column
puts '<td width="50%" valign="top">'

	puts '<table cellpadding="0" cellspacing="0" border="0" class="lhsAuction">'

	each_node(doc, '//node[@class="storage"]') do |node, idx|
		print_title("<h2>Storage Controller #{idx}</h2>")
		print_infomap(get_node_attrs(node, '//'))
		print_capabilities(node)
	end

	each_node(doc, '//node[@class="network"]') do |node, idx|
		print_title("<h2>Network Controller #{idx}</h2>")
		print_infomap(get_network_attrs(node))
		print_capabilities(node)
	end

	each_node(doc, '//node[@class="display"]') do |node, idx|
		print_title("<h2>Display</h2>")
		print_infomap(get_node_attrs(node))
		print_capabilities(node)
	end

	each_node(doc, '//node[@id="cdrom"]') do |node, idx|
		print_title("<h2>CD-ROM</h2>")
		print_infomap(get_node_attrs(node))
		print_capabilities(node)
	end

	each_node(doc, '//node[@id="usb0"]') do |node, idx|
		print_title("<h2>USB</h2>")
		print_infomap(get_node_attrs(node))
		print_capabilities(node)
	end

	# each_node(doc, '//node[@class="bridge"]') do |node, idx|
	# 	print_node_attrs("Bridge #{idx}", get_node_attrs(node, '//'))
	# end
	# 
	# each_node(doc, '//node[@class="bus"]') do |node, idx|
	# 	print_node_attrs("Bus #{idx}", get_node_attrs(node, '//'))
	# end

	puts '</table>'

puts '</td>'
puts '</tr>'
puts '</table>'

puts '<style type="text/css">
.lhsAuction {
	font-family: Helvetica, Arial, sans-serif;
}
table.lhsAuction p {
	font-size: 0.8em;
	padding: 0;
	margin: 0.3em;
}
.lhsAuction h1, h2, h3 {
	margin-top: 1em;
	margin-bottom: 0.5em;
}
</style>'
